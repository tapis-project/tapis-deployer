import os 
import argparse
import requests
import json


# var mapping for all comps
# e.g. {"{internal_component_name}": "{skexport_name}"}

actors = {
    "RABBITMQ_DEFAULT_PASS":"DBCREDENTIAL_RABBITMQ_ABACO_RABBIT_MQ_HOST_RABBITMQ_ABACO_PASSWORD",
    "RABBITMQ_PASSWORD":"DBCREDENTIAL_RABBITMQ_ABACO_RABBIT_MQ_HOST_RABBITMQ_ABACO_PASSWORD",
    "MONGO_INITDB_ROOT_PASSWORD": "DBCREDENTIAL_MONGO_ABACO_MONGO_DB_HOST_MONGODB_ABACO_PASSWORD",
    "MONGO_PASSWORD": "DBCREDENTIAL_MONGO_ABACO_MONGO_DB_HOST_MONGODB_ABACO_PASSWORD",
    "SERVICEPWD_ABACO_PASSWORD": "SERVICEPWD_ABACO_PASSWORD",
    "SERVICE_PASSWORD": "SERVICEPWD_ABACO_PASSWORD"
    }

apps = {
    "TAPIS_DB_PASSWORD":"DBCREDENTIAL_POSTGRES_APPS_POSTGRES_TAPISAPPDB_POSTGRES_PASSWORD",
    "TAPIS_SERVICE_PASSWORD": "SERVICEPWD_APPS_PASSWORD",
    "POSTGRES_PASSWORD": "DBCREDENTIAL_POSTGRES_APPS_POSTGRES_TAPISAPPDB_POSTGRES_PASSWORD",
    "POSTGRES_USER_PASSWORD": "DBCREDENTIAL_POSTGRES_APPS_POSTGRES_TAPISAPPDB_TAPIS_APP_PASSWORD",
    "service_password": "SERVICEPWD_APPS_PASSWORD",
    "MONITOR_PASSWORD": "DBCREDENTIAL_POSTGRES_APPS_POSTGRES_TAPISAPPDB_TAPIS_APP_PASSWORD"
    }

authenticator = {
    "POSTGRES_PASSWORD": "DBCREDENTIAL_POSTGRES_POSTGRES_AUTHENTICATOR_AUTHENTICATOR_PASSWORD",
    "postgres_password": "DBCREDENTIAL_POSTGRES_POSTGRES_AUTHENTICATOR_AUTHENTICATOR_PASSWORD",
    "LDAP_ROOTPASS": "USER_ADMIN_AUTHENTICATOR_LDAP_TAPIS_DEV_PASSWORD",
    "service_password": "SERVICEPWD_AUTHENTICATOR_PASSWORD"
    }
                
files = {
    "RABBITMQ_PASSWORD":"DBCREDENTIAL_RABBITMQ_TAPISFILES_RABBITMQ_FILES_FILES_PASSWORD",
    "RABBITMQ_DEFAULT_PASS":"DBCREDENTIAL_RABBITMQ_TAPISFILES_RABBITMQ_FILES_FILES_PASSWORD",
    "DB_PASSWORD":"DBCREDENTIAL_POSTGRES_TAPISFILES_POSTGRES_FILES_FILES_PASSWORD",
    "POSTGRES_PASSWORD":"DBCREDENTIAL_POSTGRES_TAPISFILES_POSTGRES_FILES_FILES_PASSWORD",
    "SERVICE_PASSWORD":"SERVICEPWD_FILES_PASSWORD"
    }

globus_proxy = {"":""}

jobs = {
    "TAPIS_SERVICE_PASSWORD": "SERVICEPWD_JOBS_PASSWORD",
    "TAPIS_DB_PASSWORD": "DBCREDENTIAL_POSTGRES_JOBS_POSTGRES_TAPISJOBSDB_TAPIS_PASSWORD",
    "TAPIS_QUEUE_ADMIN_PASSWORD": "DBCREDENTIAL_RABBITMQ_JOBS_RABBITMQ_JOBSHOST_TAPIS_PASSWORD",
    "TAPIS_QUEUE_PASSWORD": "DBCREDENTIAL_RABBITMQ_JOBS_RABBITMQ_JOBSHOST_JOBS_PASSWORD",
    "POSTGRES_PASSWORD": "DBCREDENTIAL_POSTGRES_JOBS_POSTGRES_TAPISJOBSDB_TAPIS_PASSWORD",
    "RABBITMQ_DEFAULT_PASS": "DBCREDENTIAL_RABBITMQ_JOBS_RABBITMQ_JOBSHOST_TAPIS_PASSWORD",
    "TPW": "DBCREDENTIAL_POSTGRES_JOBS_POSTGRES_TAPISJOBSDB_TAPIS_PASSWORD",
    "PW": "DBCREDENTIAL_POSTGRES_JOBS_POSTGRES_TAPISJOBSDB_TAPIS_PASSWORD"
    }

meta = {
    "TAPIS_SERVICE_PASSWORD":"SERVICEPWD_META_PASSWORD",
    "MONGO_INITDB_ROOT_PASSWORD": "DBCREDENTIAL_MONGO_RESTHEART_MONGO_NA_RESTHEART_PASSWORD",
    "MONGO_INITDB_ALT_PASSWORD": "DBCREDENTIAL_MONGO_ALT_RESTHEART_MONGO_NA_RESTHEART_PASSWORD",
    "MONGO_URI": "", # populated later
    "mongo_password": "DBCREDENTIAL_MONGO_RESTHEART_MONGO_NA_RESTHEART_PASSWORD",
    "alt_mongo_password": "DBCREDENTIAL_MONGO_ALT_RESTHEART_MONGO_NA_RESTHEART_PASSWORD"
    }

monitoring = {
    "GF_SECURITY_ADMIN_PASSWORD":"USER_ADMIN_GRAFANA_ADMIN_SECRETS_GRAFANA_PASSWORD",
    "GF_SERVER_DOMAIN": "{{  global_service_url |replace("https://", "") }}",
    "TAPIS_DB_MONITOR_PASSWORD":"USER_ADMIN_GRAFANA_ADMIN_POSTGRES_RO_PASSWORD_PASSWORD",
    "AWS_SECRET_ACCESS_KEY": "USER_ADMIN_GRAFANA_ADMIN_THANOS_S3_SECRET_KEY_PASSWORD",
    "META_PASSWORD": "DBCREDENTIAL_MONGO_RESTHEART_MONGO_NA_RESTHEART_PASSWORD",
    "POSTGRES_PASSWORD_AUTH": "DBCREDENTIAL_POSTGRES_POSTGRES_AUTHENTICATOR_AUTHENTICATOR_PASSWORD",
    "POSTGRES_PASSWORD_APPS": "DBCREDENTIAL_POSTGRES_APPS_POSTGRES_TAPISAPPDB_POSTGRES_PASSWORD",
    "POSTGRES_PASSWORD_JOBS": "DBCREDENTIAL_POSTGRES_JOBS_POSTGRES_TAPISJOBSDB_TAPIS_PASSWORD",
    "MONITOR_PASSWORD": ""

}

notifications = {
    "PGADMIN_DEFAULT_PASSWORD": "DBCREDENTIAL_PGADMIN_NOTIFICATIONS_POSTGRES_TAPISNTFDB_WOW_PASSWORD",
    "TAPIS_DB_USER_PASSWORD": "DBCREDENTIAL_POSTGRES_NOTIFICATIONS_POSTGRES_TAPISNTFDB_POSTGRES_PASSWORD",
    "POSTGRES_USER_PASSWORD": "DBCREDENTIAL_POSTGRES_NOTIFICATIONS_POSTGRES_TAPISNTFDB_POSTGRES_PASSWORD",
    "TAPIS_DB_PASSWORD": "DBCREDENTIAL_POSTGRES_NOTIFICATIONS_POSTGRES_TAPISNTFDB_TAPIS_NTF_PASSWORD",
    "POSTGRES_PASSWORD": "DBCREDENTIAL_POSTGRES_NOTIFICATIONS_POSTGRES_TAPISNTFDB_TAPIS_NTF_PASSWORD",
    "TAPIS_QUEUE_PASSWORD": "DBCREDENTIAL_RABBITMQ_NOTIFICATIONS_RABBITMQ_NOTIFICATIONSHOST_NOTIFICATIONS_PASSWORD",
    "RABBITMQ_DEFAULT_PASS": "DBCREDENTIAL_RABBITMQ_NOTIFICATIONS_RABBITMQ_NOTIFICATIONSHOST_TAPIS_PASSWORD",
    "TAPIS_QUEUE_ADMIN_PASSWORD": "DBCREDENTIAL_RABBITMQ_NOTIFICATIONS_RABBITMQ_NOTIFICATIONSHOST_TAPIS_PASSWORD",
    "TAPIS_SERVICE_PASSWORD": "SERVICEPWD_NOTIFICATIONS_PASSWORD",
    "service_password": "SERVICEPWD_NOTIFICATIONS_PASSWORD"
    }

pgrest = {"":""}

pods = {"":""}

proxy = {"":""}

security = {
    "TAPIS_SK_VAULT_SECRET_ID": "", # these two are populated later with curl cmds
    "TAPIS_SK_VAULT_ROLE_ID": "",
    "TAPIS_DB_PASSWORD" : "DBCREDENTIAL_POSTGRES_SK_POSTGRES_TAPISSECDB_TAPIS_PASSWORD",
    "TAPIS_PASSWORD": "DBCREDENTIAL_POSTGRES_SK_POSTGRES_TAPISSECDB_TAPIS_PASSWORD",
    "POSTGRES_PASSWORD": "DBCREDENTIAL_POSTGRES_SK_POSTGRES_TAPISSECDB_POSTGRES_PASSWORD",
    "PW" : "DBCREDENTIAL_POSTGRES_SK_POSTGRES_TAPISSECDB_POSTGRES_PASSWORD",
    "TPW" : "DBCREDENTIAL_POSTGRES_SK_POSTGRES_TAPISSECDB_TAPIS_PASSWORD"
    }

skadmin = {"":""}

streams = {
    "influxdb_password": "DBCREDENTIAL_INFLUX_INFLUX_HOST_CHORDS_TS_PRODUCTION_ADMIN_PASSWORD",
    "INFLUXDB_PASSWORD": "DBCREDENTIAL_INFLUX_INFLUX_HOST_CHORDS_TS_PRODUCTION_ADMIN_PASSWORD",
    "INFLUXDB_ADMIN_PW": "DBCREDENTIAL_INFLUX_INFLUX_HOST_CHORDS_TS_PRODUCTION_ADMIN_PASSWORD",
    "mysql_password": "DBCREDENTIAL_MYSQL_MYSQL_HOST_CHORDS_SEEDED_PRODUCTION_ADMIN_PASSWORD",
    "mysql-password": "DBCREDENTIAL_MYSQL_MYSQL_HOST_CHORDS_SEEDED_PRODUCTION_ADMIN_PASSWORD",
    "MYSQL_PASSWORD": "DBCREDENTIAL_MYSQL_MYSQL_HOST_CHORDS_SEEDED_PRODUCTION_ADMIN_PASSWORD",
    "CHORDS_MYSQL_PASSWORD": "DBCREDENTIAL_MYSQL_MYSQL_HOST_CHORDS_SEEDED_PRODUCTION_ADMIN_PASSWORD",
    "CHORDS_ADMIN_PW": "DBCREDENTIAL_MYSQL_MYSQL_HOST_CHORDS_SEEDED_PRODUCTION_ADMIN_PASSWORD",
    "chords_api_key": "USER_ADMIN_ADMIN_SECRETS_CHORDS_API_KEY",
    "CHORDS_API_KEY": "USER_ADMIN_ADMIN_SECRETS_CHORDS_API_KEY",
    "influx-password": "DBCREDENTIAL_INFLUX_INFLUX_HOST_CHORDS_TS_PRODUCTION_ADMIN_PASSWORD",
    "service-password": "SERVICEPWD_STREAMS_PASSWORD",
    "service_password": "SERVICEPWD_STREAMS_PASSWORD",
    "CHORDS_ADMIN_PW": "DBCREDENTIAL_MYSQL_MYSQL_HOST_CHORDS_SEEDED_PRODUCTION_ADMIN_PASSWORD",
    "INFLUXDB_ADMIN_PW": "DBCREDENTIAL_INFLUX_INFLUX_HOST_CHORDS_TS_PRODUCTION_ADMIN_PASSWORD",
    "MYSQL_PASSWORD": "DBCREDENTIAL_MYSQL_MYSQL_HOST_CHORDS_SEEDED_PRODUCTION_ADMIN_PASSWORD",
    "CHORDS_MYSQL_PASSWORD": "DBCREDENTIAL_MYSQL_MYSQL_HOST_CHORDS_SEEDED_PRODUCTION_ADMIN_PASSWORD"
}

systems = {
    "pgadmin_password": "DBCREDENTIAL_PGADMIN_SYSTEMS_POSTGRES_TAPISSYSDB_WOW_PASSWORD",
    "postgres_password": "DBCREDENTIAL_POSTGRES_SYSTEMS_POSTGRES_TAPISSYSDB_POSTGRES_PASSWORD",
    "POSTGRES_PASSWORD": "DBCREDENTIAL_POSTGRES_SYSTEMS_POSTGRES_TAPISSYSDB_POSTGRES_PASSWORD",
    "postgres_user_password": "DBCREDENTIAL_POSTGRES_SYSTEMS_POSTGRES_TAPISSYSDB_TAPIS_SYS_PASSWORD",
    "service_password": "SERVICEPWD_SYSTEMS_PASSWORD",
    "TAPIS_SERVICE_PASSWORD": "SERVICEPWD_SYSTEMS_PASSWORD",
    "TAPIS_DB_PASSWORD": "DBCREDENTIAL_POSTGRES_SYSTEMS_POSTGRES_TAPISSYSDB_POSTGRES_PASSWORD"
    }

tapisui = {"":""}

tenants = {
    "postgres_password": "DBCREDENTIAL_POSTGRES_TENANTS_POSTGRES_TENANTS_TENANTS_PASSWORD",
    "POSTGRES_PASSWORD": "DBCREDENTIAL_POSTGRES_TENANTS_POSTGRES_TENANTS_TENANTS_PASSWORD",
    "service_password": "SERVICEPWD_TENANTS_PASSWORD",
    "admin_tenant_public_key": "JWTSIGNING_ADMIN_PUBLICKEY",
    "dev_tenant_public_key": "JWTSIGNING_DEV_PUBLICKEY" 
    }

tokens = {
    "site_admin_privatekey": "JWTSIGNING_ADMIN_PRIVATEKEY"
    }

vault = {"":""}

workflows = {"":""}


# parse args
parser = argparse.ArgumentParser()
parser.add_argument('-c', '--comp', help='Tapis component to export env file for', required=True)
parser.add_argument('-d', '--dir', help='Tapis data dir as defined in the ansible', required=True)
parser.add_argument('-v', '--verbose', help='Display debug information', action='store_true')
args = parser.parse_args()

# normalize component name
component = args.comp.replace('-', '_')

# expand directory vars with things like ~ and $HOME
tapisdatadir_absolute = os.path.expanduser(os.path.expandvars(args.dir))

# ensure data dir exists for component
try:
    if args.verbose:
        print(f"trying makedir with {os.path.join(tapisdatadir_absolute + '/' + args.comp)}")
    os.makedirs(os.path.join(tapisdatadir_absolute + '/' + args.comp))
    if args.verbose:
        print(f'success')
except FileExistsError:
    if args.verbose:
        print(f"error making {os.path.join(tapisdatadir_absolute + '/' + args.comp)}, already exists. Ignoring")
    pass #ignore file exists, supposed to be created already anyway

# set local vars
infile = tapisdatadir_absolute + '/skadmin/env'
try:
    local = locals()[component]
except KeyError:
    if args.verbose:
        print(f'invalid component name. Exiting')
        exit(1)

try:
    outfile = open((tapisdatadir_absolute + '/' + args.comp + '/env'), 'w')
    if args.verbose:
            print(f'successfuly opened outfile: {outfile}')
except Exception as e:
    print(f'''error opening outfile: {outfile}::
    {e}''')
output_dict = {}

if args.verbose:
    print(f'''have local args:
    component: {component}
    infile: {infile}
    local: {local}
    outfile: {outfile}''')

# populate vault values for security
if component == 'security':
    vault_token = open(tapisdatadir_absolute + '/vault/vault-token').read()
    headers = {'X-Vault-Token': f'{vault_token}'}

    r = requests.post('http://localhost:8200/v1/auth/approle/role/sk/secret-id', headers=headers)
    if args.verbose:
        print(f'getting secret-id, have:: {r.json()}')
    output_dict['TAPIS_SK_VAULT_SECRET_ID'] =  r.json()['data']['secret_id']
    output_dict['VAULT_SECRETID'] =  r.json()['data']['secret_id']

    r = requests.get('http://localhost:8200/v1/auth/approle/role/sk/role-id', headers=headers)
    if args.verbose:
        print(f'getting role-id, have:: {r.json()}')
    output_dict['TAPIS_SK_VAULT_ROLE_ID'] =  r.json()['data']['role_id']
    output_dict['VAULT_ROLEID'] =  r.json()['data']['role_id']

    if args.verbose:
        print(f'''populating values for security, have:
            vault_token: {vault_token}
            secret_id: {output_dict['TAPIS_SK_VAULT_SECRET_ID']}
            role_id: {output_dict['TAPIS_SK_VAULT_ROLE_ID']}
            ''')

with open(infile, 'r') as lines:
    if args.verbose:
        print(f'successfuly opened infile: {infile}')
    for line in lines:
        if len(line) <= 1:
            continue # ignore empty line
        try:
            skexport_key, skexport_value = line.split('=', 1)
            skexport_value = skexport_value.replace('\\n', '\n').strip() # sanitize newlines on priv/pub keys, strip trailing whitespace
            for key in local:
                if local[key] == skexport_key:
                    if args.verbose:
                        print(f'mapped {key}="{skexport_value}"')
                    # outfile.write(f"{key}='{skexport_value}'\n")
                    output_dict[key] = skexport_value
                    if key == 'MONGO_INITDB_ROOT_PASSWORD':
                        output_dict["MONGO_URI"] = f"mongodb://restheart:{skexport_value}@restheart-mongo:27017/?authSource=admin"
        except KeyError:
            pass

if args.verbose:
    print(f'Completed mapping. Writing {output_dict}')
    
for key in output_dict:
    outfile.write(f'{key}="{output_dict[key]}"\n')
            

outfile.close() 
