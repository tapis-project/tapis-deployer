#!/bin/bash

set -e 

# global Tapis burnup script

# Helps run all the components in the correct order

here=`pwd`

mkdir -p {{ tapisdatadir }}

usage(){
  echo "ERROR: This script requires 1 option to run."
  echo "Check the included README.md for options (or see case statement in this script)."
  echo "Exiting."
}


### vars

VAULTURL="{{ baseburnup_vault_url }}"
SERVICEURL="{{ baseburnup_service_url }}"

### checks

checkcert(){
  # will not work until nginx is up
  echo "checking cert: $1"
  echo test | openssl s_client -showcerts -connect $1:443
}

curlurl(){
  # will not work until nginx is up
  u="https://$1"
  echo "curling url: $u"
  curl -k $u
}

pingsite(){
  echo "pinging url: $1"
  ping -c 1 -W 5 $1
}

checkvault(){
  # TODO: fix to work if vault is remote
  # will not work until vault is up
  echo "Vault Sealed?" 
  if kubectl exec -it deploy/vault -- vault status | grep Sealed | grep false 
  then
    echo "Vault check succeeded."
  else
    echo "Vault check failed. Check vault status & re-run burnup."
    echo "e.g. 'kubectl exec -it deploy/vault -- vault status'"
    echo "(Vault should be Initialized = true and Sealed = false.)"
    echo "Exiting."
    exit 1
  fi
}

checkvault_remote(){
  # moved to vault burnup
  echo

}


getconfig(){
# TODO
echo 
}


preflight_check(){
  getconfig
  echo "site: $SERVICEURL"
  pingsite $SERVICEURL
}

postnginx_check(){
  curlurl $SERVICEURL
  checkcert $SERVICEURL
}


### services

actors(){
  cd $here/actors
  ./burnup
}

apps(){
  cd $here/apps
  ./burnup
}

authenticator(){
  cd $here/authenticator
  ./burnup
}

container-registry(){
  cd $here/container-registry
  ./burnup
}

files(){
  cd $here/files
  ./burnup
}

globus-proxy() {
  cd $here/globus-proxy
  ./burnup
}

jobs(){
  cd $here/jobs
  ./burnup
}

meta(){
  cd $here/meta
  ./burnup
}

monitoring(){
  cd $here/monitoring
  ./burnup
}

notifications(){
  cd $here/notifications
  ./burnup
}

pgrest(){
  echo "pgrest:"
  cd $here/pgrest
  ./burnup
}

pgrest-a2cps-dev(){
  echo "pgrest-a2cps-dev:"
  cd $here/pgrest-a2cps-dev
  ./burnup
}

pgrest-a2cps-prod(){
  echo "pgrest-a2cps-prod:"
  cd $here/pgrest-a2cps-prod
  ./burnup
}

pods(){
  cd $here/pods
  ./burnup
}

proxy(){
  cd $here/proxy
  ./burnup
}

security(){
  cd $here/security
  ./burnup
}

skadmin(){
  cd $here/skadmin
  ./burnup
}

streams(){
  cd $here/streams
  ./burnup
}

systems(){
  cd $here/systems
  ./burnup
}

tapisui(){
  cd $here/tapisui
  ./burnup
}

tenants(){
  cd $here/tenants
  ./burnup
}

tokens(){
  cd $here/tokens
  ./burnup
}

vault(){
  cd $here/vault
  ./burnup
}

workflows(){
  cd $here/workflows
  ./burnup
}

primary_site(){
  echo
}

associate_site(){
  echo
}


### functions


get_vault_token(){
  echo
}

check_vault_unsealed(){
  echo
}

create_kservice(){
    # Create kubernetes services objects for each component.
    cd $here
    echo "creating kubernetes servies:"
    find . -name '*service*.yml' -exec kubectl apply -f {} \;
}

get_public_keys(){
  echo "Collecting public keys for associate site tenants. Please send these to your tenants admin before next steps in deployment."
  cd $here/admin
  ./get-assocsite-publickeys
}


init(){

  create_kservice

{% if "proxy" in components_to_deploy%}
  proxy
{% endif %}

{% if "vault" in components_to_deploy%}
  vault
  checkvault
{% else %}
  # using external vault, so do not start one here
{% endif %}

{% if "skadmin" in components_to_deploy%}
  skadmin
{% endif %}

{% if site_type == 2 %}
  get_public_keys
{% endif %}

}


primary_services(){

{% if  "tenants" in components_to_deploy %}
  tenants
{% endif %}

{% if  "security" in components_to_deploy %}
  security
{% endif %}

{% if  "tokens" in components_to_deploy %}
  tokens
{% endif %}

{% if  "authenticator" in components_to_deploy %}
  authenticator
{% endif %}

}

secondary_services() {

{% if  "systems" in components_to_deploy %}
  systems
{% endif %}

{% if  "files" in components_to_deploy %}
  files
{% endif %}

{% if "globus-proxy" in components_to_deploy %}
  globus-proxy
{% endif %}

{% if  "apps" in components_to_deploy %}
  apps
{% endif %}

{% if  "jobs" in components_to_deploy %}
  jobs
{% endif %}

{% if  "meta" in components_to_deploy %}
  meta
{% endif %}

{% if  "streams" in components_to_deploy %}
  streams
{% endif %}

{% if  "actors" in components_to_deploy %}
  actors
{% endif %}

{% if  "container-registry" in components_to_deploy %}
  container-registry
{% endif %}

{% if  "mlhub" in components_to_deploy %}
  mlhub
{% endif %}

{% if  "monitoring" in components_to_deploy %}
  monitoring
{% endif %}

{% if  "notifications" in components_to_deploy %}
  notifications 
{% endif %}

{% if  "pgrest" in components_to_deploy %}
  pgrest
{% endif %}

{% if  "pgrest-a2cps-dev" in components_to_deploy %}
  pgrest-a2cps-dev
{% endif %}

{% if  "pgrest-a2cps-prod" in components_to_deploy %}
  pgrest-a2cps-prod
{% endif %}

{% if  "pods" in components_to_deploy %}
  pods
{% endif %}

{% if  "tapisui" in components_to_deploy %}
  tapisui
{% endif %}

{% if  "workflows" in components_to_deploy %}
  workflows
{% endif %}

}

### run

#getconfig

case $1 in
  checkvault)
    "$@"
    exit 0
    ;;
  init)
    "$@"
    exit 0
    ;;
  preflight_check)
    "$@"
    exit 0
    ;;
  postnginx_check)
    "$@"
    exit 0
    ;;
  primary_services)
    "$@"
    exit 0
    ;;
  secondary_services)
    "$@"
    exit 0
    ;;
  create_kservice)
    "$@"
    exit 0
    ;;
  get_public_keys)
    "$@"
    exit 0
    ;;
  *)
    usage
    exit 0
    ;;
esac
