user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

{% if "pods" in components_to_deploy %}
### Everything first goes through this stream stanza. Map matches subdomain to port to route to.
### If no map found, we route to default 8443. This directs back to HTTP stanza as normal.
stream {

    log_format stream_routing '$remote_addr [$time_local] '
                              'with SNI name "$ssl_preread_server_name" '
                              'proxying to "$instanceport" '
                              '$protocol $status $bytes_sent $bytes_received '
                              '$session_time';

    # 'map' maps input string to output variable. Regex works.
    # Ports used are purely random. Feel free to change.
    map $ssl_preread_server_name $instanceport {
        # Route TCP with following whatever.pods.whatever.develop.tapis.ioto pods-nginx.
        "~pods.{{ proxy_nginx_server_name }}"      5510;
        # Else default to 8443 (listened to by http stanza).
        default                         8443;
    }

    # pods_service. Route TCP to pods-nginx pod.
    # server {
    #     listen                 5510;
    #     ssl_preread            off;
    #     proxy_timeout          600s;
    #     access_log /dev/stdout stream_routing;        # cgarcia- Unsure if this entire 'server' block should be in an if, or if we
    #     # should what I'm doing here.
        
    #     proxy_pass pods-traefik:80;
        

    # }

    # Listen for all incoming requests. Preread server name (for mapping). Then pass.
    server {
        listen                  443;
        ssl_preread             on;
        proxy_connect_timeout   20s;  # max time to connect to pserver
        proxy_timeout           600s;
        access_log /dev/stdout stream_routing;
        proxy_pass              127.0.0.1:$instanceport;
    }
}
{% endif %}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # hammock 20211112
    log_format  main  '$remote_addr - $remote_user [$time_local] "$host" "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    #include /etc/nginx/conf.d/*.conf;

    # Redirect all non-encrypted traffic to the encrypted site.
    server
    {
        listen 80;
        listen [::]:80;

        server_name {{ proxy_nginx_server_name }};

        # Redirect with 307 to preserve post data. (301 does not)
        if ($request_method = POST) {
            return 307 https://$server_name$request_uri;
        }

        # Permanent redirect to the secured site.
        return 301 https://$server_name$request_uri;
    }

    # Configuration for the encrypted site.
    server
    {

        # You must change resolver if you want nginx to resolve docker networking
        # https://forums.docker.com/t/nginx-swarm-redeploy-timeouts/68904/5
        resolver 127.0.0.11 valid=10s;
        resolver_timeout 5s;

{% if "pods" in components_to_deploy %}
        listen 8443 ssl http2;
        listen [::]:8443 ssl http2;
{% else %}
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
{% endif %}

        server_name {{ proxy_nginx_server_name }};

        ssl_certificate /tmp/ssl/tls.crt;
        ssl_certificate_key /tmp/ssl/tls.key;

        # SSL configs. Do not change.
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        add_header Strict-Transport-Security "max-age=63072000" always;
        ssl_stapling on;
        ssl_stapling_verify on;

        charset utf-8;
        keepalive_timeout 5;

        #CORS support
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Mx-ReqToken,X-Requested-With,x-tapis-token,x-tapis-tracking-id' always;

        # big upload support
        proxy_connect_timeout 3600;
        proxy_send_timeout    3600;
        proxy_read_timeout    3600;
        send_timeout          3600;

        include /etc/nginx/conf.d/locations/*.conf;
    }
}