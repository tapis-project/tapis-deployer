#user  nobody;
worker_processes  5;

error_log  /dev/stdout  notice;
#pid        logs/nginx.pid;


events {
    worker_connections  4096;
}


http {
    include       mime.types;
    resolver 127.0.0.11;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /dev/stdout  main;

    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;
    #include /etc/nginx/conf.d/*conf; # write directly as it's easier to read.

    # Configuration for actors.
    server {

        listen 80;
        server_name abaco.org;
        charset utf-8;
        resolver 127.0.0.11; # required for docker to resolve DNS

        access_log /dev/stdout;

        location /docs {
            root /;
        }

        location ~* ^/v3/actors/admin(.*) {
            proxy_pass http://actors-admin:5000/actors/admin$1$is_args$args;
            proxy_set_header Host $host;
        }

        location ~* ^/v3/actors/(.*)/messages(.*) {
            proxy_pass http://actors-mes:5000/actors/$1/messages$is_args$args;
            proxy_set_header Host $host;
        }

        location ~ ^/v3/actors/search/(.*) {
            proxy_pass http://actors-reg:5000/actors/search/$1$is_args$args;
            proxy_set_header Host $host;
        }

        location ~ /v3/actors/(.*)/workers(.*) {
            proxy_pass http://actors-admin:5000/actors/$1/workers$2$is_args$args;
            proxy_set_header Host $host;
        }

        location ~ /v3/actors/aliases/(.*)/permissions {
            proxy_pass http://actors-admin:5000/actors/aliases/$1/permissions$is_args$args;
            proxy_set_header Host $host;
        }

        location ~ /v3/actors/(.*)/permissions {
            proxy_pass http://actors-admin:5000/actors/$1/permissions$is_args$args;
            proxy_set_header Host $host;
        }

        location ~ ^/v3/actors(.*) {
            proxy_pass http://actors-reg:5000/actors$1$is_args$args;
            proxy_set_header Host $host;
        }

        # custom 40x errors:
        error_page 400 /400.json;
        location /400.json {
            return 400 '{
                "status": "error", 
                "message": "Invalid request: The Abaco service does not know how to fulfill the request.", 
                "version": "beeep", 
                "result": null
            }';
        }
        error_page 401 /401.json;
        location /401.json {
            return 401 '{
                "status": "error",
                "message": "Invalid request: The Abaco service does not know how to fulfill the request.",
                "version": "beeep",
                "result": null
            }';
        }
        error_page 402 /402.json;
        location /402.json {
            return 402 '{
                "status": "error", 
                "message": "Invalid request: The Abaco service does not know how to fulfill the request.", 
                "version": "beeep", 
                "result": null
            }';
        }
        error_page 403 /403.json;
        location /403.json {
            return 403 '{
                "status": "error", 
                "message": "Invalid request: The Abaco service does not know how to fulfill the request.", 
                "version": "beeep", 
                "result": null
            }';
        }
        error_page 404 /404.json;
        location /404.json {
            return 404 '{
                "status": "error", 
                "message": "Invalid request: the requested URL is not an Abaco endpoint.", 
                "version": "beeep", 
                "result": null
            }';
        }
        error_page 405 /405.json;
        location /405.json {
            return 405 '{
                "status": "error", 
                "message": "Invalid request: The Abaco service does not know how to fulfill the request.", 
                "version": "beeep", 
                "result": null
            }';
        }

        # custom 50x errors:
        error_page 500 500.json;
        location /500.json{
            return 500 '{
                "status": "error", 
                "message": "Unable to parse Abaco service response. The server may be misconfigured or overloaded.", 
                "version": "beeep", 
                "result": null
            }';
        }
        error_page 501 501.json;
        location /501.json{
            return 501 '{
                "status": "error", 
                "message": "Unable to parse Abaco service response. The server may be misconfigured or overloaded.", 
                "version": "beeep", 
                "result": null
            }';
        }
        error_page 502 502.json;
        location /502.json{
            return 502 '{
                "status": "error", 
                "message": "Timeout error waiting on Abaco service response. The server may be busy or overloaded.", 
                "version": "beeep", 
                "result": null
            }';
        }
        error_page 503 503.json;
        location /503.json{
            return 503 '{
                "status": "error", 
                "message": "Unable to parse Abaco service response. The server may be misconfigured or overloaded.", 
                "version": "beeep", 
                "result": null
            }';
        }
        error_page 504 504.json;
        location /504.json{
            return 504 '{
                "status": "error", 
                "message": "Unable to parse Abaco service response. The server may be misconfigured or overloaded.", 
                "version": "beeep", 
                "result": null
            }';
        }
    }
}