#!/bin/bash

function usage() {
  echo "$0 "
  echo USAGE GOES HERE
  echo "OPTIONS:"
  echo 
  exit 1
}

function dumpCount() {
  CNT_PG_HOST=$1
  CNT_PG_USER=$2
  CNT_PG_PASSWORD=$3
  CNT_PG_SCHEMA=$4

#  export PGPASSWORD=${CNT_PG_PASSWORD}

  CNT_PG_GET_TABLES_QUERY="select table_name from information_schema.tables where table_schema = '${CNT_PG_SCHEMA}' and table_type = 'BASE TABLE' order by table_name;"
  PG_TABLES=$(psql --no-password --host=${CNT_PG_HOST} --username=${CNT_PG_USER} -tc "${CNT_PG_GET_TABLES_QUERY}" ${CNT_PG_DATABASE} )

  for CNT_PG_TABLE in ${PG_TABLES} ; do 
    psql --no-password --host=${CNT_PG_HOST} -U ${CNT_PG_USER} -tc "select '${CNT_PG_TABLE}', count(*) from ${CNT_PG_TABLE};" 
  done
}

function addPgPassEntry() {
    PG_PASS_HOST=$1
    PG_PASS_PORT=$2
    PG_PASS_DATABASE=$3
    PG_PASS_USER=$4
    PG_PASS_PASSWORD=$5
    PG_PASS_FILE=$6

    echo -n "${PG_PASS_HOST}" >> ${PG_PASS_FILE}
    echo -n ":" >> ${PG_PASS_FILE}
    echo -n "${PG_PASS_PORT}" >> ${PG_PASS_FILE}
    echo -n ":" >> ${PG_PASS_FILE}
    echo -n "${PG_PASS_DATABASE}" >> ${PG_PASS_FILE}
    echo -n ":" >> ${PG_PASS_FILE}
    echo -n "${PG_PASS_USER}" >> ${PG_PASS_FILE}
    echo -n ":" >> ${PG_PASS_FILE}
    echo -n "${PG_PASS_PASSWORD}" >> ${PG_PASS_FILE}
    echo >> "${PG_PASS_FILE}"
} 

function dumpVars() {
    echo ======================= vars =============================
    echo PG_11_POD=${PG_11_POD}
    echo PG_11_HOST=${PG_11_HOST}
    echo PG_11_ADMIN_USER=${PG_11_ADMIN_USER}
    echo PG_11_ADMIN_USER_PASSWORD=${PG_11_ADMIN_USER_PASSWORD}
    echo PG_11_TAPIS_USER=${PG_11_TAPIS_USER}
    echo PG_11_TAPIS_USER_PASSWORD=${PG_11_TAPIS_USER_PASSWORD}
    echo PG_11_PORT=${PG_11_PORT}
    echo PG_11_DATABASE=${PG_11_DATABASE}
    echo PG_11_SCHEMA=${PG_11_SCHEMA}

    echo PG_16_POD=${PG_16_POD}
    echo PG_16_HOST=${PG_16_HOST}
    echo PG_16_ADMIN_USER=${PG_16_ADMIN_USER}
    echo PG_16_ADMIN_USER_PASSWORD=${PG_16_ADMIN_USER_PASSWORD}
    echo PG_16_TAPIS_USER=${PG_16_TAPIS_USER}
    echo PG_16_TAPIS_USER_PASSWORD=${PG_16_TAPIS_USER_PASSWORD}
    echo PG_16_PORT=${PG_16_PORT}
    echo PG_16_DATABASE=${PG_16_DATABASE}
    echo PG_16_SCHEMA=${PG_11_SCHEMA}
    echo ======================= vars =============================
}

function checkSet() {
    VALUE=${!1}
    ERROR_MESSAGE=$2
    
    if [[ -z ${VALUE} ]] ; then 
        echo ${ERROR_MESSAGE}
        usage
        exit 1
    fi
}

function create_pgpass() {
  echo creating .pgpass file
  PG_PASS_FILE="/root/.pgpass"
  touch ${PG_PASS_FILE}
  chmod 600 ${PG_PASS_FILE}
  addPgPassEntry "${PG_11_HOST}" "${PG_11_PORT}" "*" "${PG_11_ADMIN_USER}" "${PG_11_ADMIN_USER_PASSWORD}" "${PG_PASS_FILE}"
  addPgPassEntry "${PG_16_HOST}" "${PG_16_PORT}" "*" "${PG_16_ADMIN_USER}" "${PG_16_ADMIN_USER_PASSWORD}" "${PG_PASS_FILE}"
}

function migrate_data() {
  echo Migrating data
  create_pgpass
  pg_dumpall --no-password --no-role-passwords --host=${PG_11_HOST} --username=${PG_11_ADMIN_USER} -l ${PG_11_DATABASE} | psql --no-password --host=${PG_16_HOST} --username=${PG_16_ADMIN_USER} ${PG_16_DATABASE} 
}

function check_data() {
  echo Checking data
  create_pgpass
  echo 
  echo 
  echo 
  echo 
  echo === PG 11 stats ===
  echo dumpCount "${PG_11_HOST}" "${PG_11_ADMIN_USER}" "${PG_11_ADMIN_USER_PASSWORD}" "${PG_11_SCHEMA}" 
  dumpCount "${PG_11_HOST}" "${PG_11_ADMIN_USER}" "${PG_11_ADMIN_USER_PASSWORD}" "${PG_11_SCHEMA}" 
  echo 
  echo 
  echo 
  echo 
  echo === PG 16 stats ===
  echo dumpCount "${PG_16_HOST}" "${PG_16_ADMIN_USER}" "${PG_16_ADMIN_USER_PASSWORD}" "${PG_16_SCHEMA}" 
  dumpCount "${PG_16_HOST}" "${PG_16_ADMIN_USER}" "${PG_16_ADMIN_USER_PASSWORD}" "${PG_16_SCHEMA}" 
}

while [[ $# -gt 0 ]]; do
  case $1 in
    --pg_11_host)
      PG_11_HOST="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_11_admin_user)
      PG_11_ADMIN_USER="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_11_admin_user_password)
      PG_11_ADMIN_USER_PASSWORD="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_11_tapis_user)
      PG_11_TAPIS_USER="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_11_tapis_user_password)
      PG_11_TAPIS_USER_PASSWORD="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_11_port)
      PG_11_PORT="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_11_database)
      PG_11_DATABASE="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_11_schema)
      PG_11_SCHEMA="$2"
      shift # past argument
      shift # past value
      ;;

    --pg_16_host)
      PG_16_HOST="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_16_admin_user)
      PG_16_ADMIN_USER="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_16_admin_user_password)
      PG_16_ADMIN_USER_PASSWORD="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_16_tapis_user)
      PG_16_TAPIS_USER="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_16_tapis_user_password)
      PG_16_TAPIS_USER_PASSWORD="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_16_port)
      PG_16_PORT="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_16_pod)
      PG_16_POD="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_16_database)
      PG_16_DATABASE="$2"
      shift # past argument
      shift # past value
      ;;
    --pg_16_schema)
      PG_16_SCHEMA="$2"
      shift # past argument
      shift # past value
      ;;
    -*|--*)
      echo "Unknown option $1"
      usage
      ;;
    *)
      if [[ $# -ne 1 ]] ; then 
        echo "Only one comand (positional argument) is allowed"
        echo "Positional arg count: $#, Values: $*"
        usage
        exit 0;
      fi
      ACTION=$1
      shift # past argument
  esac
done

#dumpVars

checkSet PG_11_POD "Variable PG_11_POD (--pg_11_pod parameter) was not set"
checkSet PG_11_HOST "Variable PG_11_HOST (--pg_11_host parameter) was not set"
checkSet PG_11_ADMIN_USER "Variable PG_11_ADMIN_USER (--pg_11_admin_user parameter) was not set"
checkSet PG_11_ADMIN_USER_PASSWORD "Variable PG_11_ADMIN_USER_PASSWORD (--pg_11_admin_user_password parameter) was not set"
checkSet PG_11_TAPIS_USER "Variable PG_11_TAPIS_USER (--pg_11_tapis_user parameter) was not set"
checkSet PG_11_TAPIS_USER_PASSWORD "Variable PG_11_TAPIS_USER_PASSWORD (--pg_11_tapis_user_password parameter) was not set"
checkSet PG_11_PORT "Variable PG_11_PORT (--pg_11_admin_port parameter) was not set"
checkSet PG_11_DATABASE "Variable PG_11_DATABASE (--pg_11_database parameter) was not set"
checkSet PG_11_SCHEMA "Variable PG_11_SCHEMA (--pg_11_schema parameter) was not set"

checkSet PG_16_POD "Variable PG_16_POD (--pg_16_pod parameter) was not set"
checkSet PG_16_HOST "Variable PG_16_HOST (--pg_16_host parameter) was not set"
checkSet PG_16_ADMIN_USER "Variable PG_16_ADMIN_USER (--pg_16_admin_user parameter) was not set"
checkSet PG_16_ADMIN_USER_PASSWORD "Variable PG_16_ADMIN_USER_PASSWORD (--pg_16_admin_user_password parameter) was not set"
checkSet PG_16_TAPIS_USER "Variable PG_16_TAPIS_USER (--pg_16_tapis_user parameter) was not set"
checkSet PG_16_TAPIS_USER_PASSWORD "Variable PG_16_TAPIS_USER_PASSWORD (--pg_16_tapis_user_password parameter) was not set"
checkSet PG_16_PORT "Variable PG_16_PORT (--pg_16_port parameter) was not set"
checkSet PG_16_DATABASE "Variable PG_16_DATABASE (--pg_16_database parameter) was not set"
checkSet PG_16_SCHEMA "Variable PG_16_SCHEMA (--pg_16_schema parameter) was not set"

#dumpVars

case ${ACTION} in
  migrate)
    migrate_data
    ;;
  check)
    check_data
    ;;
  *)
    echo Unknown action: ${ACTION}
    usage
esac
